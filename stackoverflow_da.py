# -*- coding: utf-8 -*-
"""stackoverflow_da.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ux2uVjKz1tdfiv4c5fb229tKlmy7_nP0

# ***Setting up the notebook***

---

# **Importing Libraries**
In this snippet all the libraries required to execute the code are imported.
"""

import numpy as np
import pandas as pd 
import copy
import datetime as dt
import os
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
import seaborn as sns
color = sns.color_palette()
from plotly import tools
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.offline as offline
offline.init_notebook_mode()
import cufflinks as cf
cf.go_offline()
import missingno as msn
from matplotlib import cm
import warnings
warnings.filterwarnings('ignore')

"""# **Mounting Drive** 
Here the Google Drive access is given to the notebook for accessing the dataset.
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Path to dataset**
Here we navigate to the directory where the dataset is present.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/DA

"""# **Importing the dataset**
Here we import the dataset and filter the useful features in the dataset.
"""

df = pd.read_csv('survey_results_public.csv',usecols=["Country","Student","Gender","Age","Employment","FormalEducation","UndergradMajor","DevType","YearsCoding","EducationTypes","JobSatisfaction","ConvertedSalary","LanguageWorkedWith","LanguageDesireNextYear","DatabaseWorkedWith","FrameworkWorkedWith","IDE","OperatingSystem","HoursComputer"])

"""# **Columns of the dataset**


"""

for col in df.columns:
    print(col)

Columns = ['Country : Country of Developer',
'Student: Is Developer Student or Working Professional',
'Employment : Employment Status of Developer',
'FormalEducation : Highest Degree Held By DEveloper (if any)',
'UndergradMajor : Major Subject Choosen by Developer',
'DevType : Developer Type',
'YearsCoding : Years of Experience in Coding',
'JobSatisfaction : Developer satisfaction with his current Job',
'ConvertedSalary : Salary earned by Developer in USD per annum',
'EducationTypes : Resources used by Developer to learn Coding',
'LanguageWorkedWith : Programming Languages programmer is currently working with',
'LanguageDesireNextYear : Programming Languages programmer wants to learn',
'DatabaseWorkedWith : Databases programmer is currently working with',
'FrameworkWorkedWith : Frameworkss programmer is currently working with',
'IDE : IDE Developer Currently using',
'OperatingSystem : OS used by Developer',
'HoursComputer : Hours spent by Developer',
'Gender : Gender of Developer',
'Age : Age in range where developer lies']

for i in Columns:
    print(i)

"""---

# **Setting up the dataset**

---

# **Cleaning the dataset**
The code below aims to handle the NULL values in the dataset.
"""

len(df)

"""**Dropping Duplicate**"""

df.drop_duplicates(keep=False,inplace=True)
len(df)

df = df[df['ConvertedSalary'].notna()]
df = df[df['FrameworkWorkedWith'].notna()]
df = df[df['UndergradMajor'].notna()]
df = df[df['DatabaseWorkedWith'].notna()]
df = df[df['LanguageDesireNextYear'].notna()]
df = df[df['Gender'].notna()]
df['Age'].fillna(df['Age'].mode()[0], inplace=True)
df['EducationTypes'].fillna(df['EducationTypes'].mode()[0], inplace=True)
df['JobSatisfaction'].fillna(df['JobSatisfaction'].mode()[0], inplace=True)
df['Student'].fillna(df['Student'].mode()[0], inplace=True)
df['Employment'].fillna(df['Employment'].mode()[0], inplace=True)
df['DevType'].fillna(df['DevType'].mode()[0], inplace=True)
df['LanguageWorkedWith'].fillna(df['LanguageWorkedWith'].mode()[0], inplace=True)
df['IDE'].fillna(df['IDE'].mode()[0], inplace=True)
df['OperatingSystem'].fillna(df['OperatingSystem'].mode()[0], inplace=True)
df['YearsCoding'].fillna(df['YearsCoding'].mode()[0], inplace=True)
df['HoursComputer'].fillna(df['HoursComputer'].mode()[0], inplace=True)

"""# **Check for NULL values**
This line of code calculate the number of NULL values in the dataset.
"""

df.isnull().sum()

"""# **Size of dataset**
The snippet below gives the count of rows, columns in the dataset.
"""

df.shape

"""# **Data Visualization**

---

#**Word Cloud of countries based on the number of responders**
"""

country = df["Country"].value_counts()[:100].reset_index()
wrds = country["index"].str.replace(" ","")
wc = WordCloud(background_color='white', colormap=cm.viridis, scale=5).generate(" ".join(wrds))
plt.figure(figsize=(16,8))
plt.imshow(wc, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud of countries based on the number of responders:", fontdict={'size':22, 'weight': 'bold'});

"""# **Bar graph of kinds of students based on the count**"""

plt.figure(figsize=(15,7))
colors = ["greyish", "faded green", "dusty purple"]
student_counts = df['Student'].value_counts()
student_counts.plot.barh(color=sns.color_palette("Set1"))
plt.title('Student', fontsize=15)
plt.yticks(fontsize=15)
plt.show()

"""# **Pie chart for the distribution of genders amongst the respondants**"""

gen = pd.DataFrame(df['Gender'].dropna().str.split(';').tolist()).stack()
gen=  gen.value_counts().sort_values(ascending=False)
labels = gen.index
labels= 'Male', 'Female', 'Non-binary or Transgender'
f, ax1 = plt.subplots(figsize=(15,7))

sizes = gen/gen.sum() * 100
sizes = [85.594640,12.897822 , 1.5075379]
explode = (0.05,0.05,0.05)
colors= ['#66b3ff','#c2c2f0', '#ff9999']
ax1.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)

centre_circle = plt.Circle((0,0),0.50,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
ax1.axis('equal')
plt.tight_layout()
plt.show()

"""# **Bar graph for Formal Education of the respondants**"""

edu = df['FormalEducation'].value_counts()
edu = pd.DataFrame({'type':edu.index,'percent':(edu.values)*100/sum(edu.values)})
fig = plt.figure()
sns.barplot(edu['percent'],edu['type'])
plt.show()

"""# **Bar graph for types of developers amongst the respondants**"""

plt.figure(figsize=(15,7))
temp_devtype = pd.DataFrame(df['DevType'].dropna().str.split(';').tolist()).stack()
temp_devtype_counts = temp_devtype.value_counts().sort_values()
temp_devtype_counts.plot.barh(color=sns.color_palette('pastel',15))
plt.title('DevType', fontsize=15)
plt.yticks(fontsize=18)
plt.show()

"""# **A chart showing the distribution of salary of all the respondants**"""

MAX_LIM = df.loc[:, 'ConvertedSalary'].quantile(0.95)

fig, axes = plt.subplots(nrows=1, ncols=1, sharey=True, figsize=(20, 8));

sns.kdeplot(df.loc[df['ConvertedSalary']<MAX_LIM, 'ConvertedSalary'], ax=axes, shade=True);
axes.set_title("Salary of Developers(USD per annum)", fontdict={'weight': 'bold', 'size': 24});

"""# **Bar graph showing the number of respondants comfortable with different languages**"""

plt.figure(figsize=(15,10))
temp_language = pd.DataFrame(df['LanguageWorkedWith'].str.split(';').tolist()).stack()
temp_language_counts = temp_language.value_counts().sort_values()
temp_language_counts.plot.barh(color=sns.color_palette('pastel',15))
plt.title('Most Popular Languages', fontsize=15)
plt.yticks(fontsize=12)
plt.show()

"""# **Bar graph showing the number of respondants comfortable with working on different platforms**"""

plt.figure(figsize=(15,7))
temp_framework = pd.DataFrame(df['FrameworkWorkedWith'].dropna().str.split(';').tolist()).stack()
temp_framework_counts = temp_framework.value_counts().sort_values()
temp_framework_counts.plot.barh(color=sns.color_palette('pastel',15))
plt.title('Most Popular Framework', fontsize=15)
plt.yticks(fontsize=12)
plt.show()

"""# **Bar graph for understanding the most popular IDE for development amongst the respondants**"""

plt.figure(figsize=(15,10))
temp_ide = pd.DataFrame(df['IDE'].str.split(';').tolist()).stack()
temp_ide_counts = temp_ide.value_counts().sort_values()
temp_ide_counts.plot.barh(color=sns.color_palette("pastel", 15))
plt.title('Most Popular IDE', fontsize=15)
plt.yticks(fontsize=12)
plt.show()

"""# **Job Satisfaction Study**

---

#**1. Job satisfaction for developers of top countries**
"""

df['JobSatisfaction'].value_counts()
sat = df[np.logical_or(np.logical_or(df['JobSatisfaction'] == 'Moderately satisfied', df['JobSatisfaction'] == 'Extremely satisfied'), df['JobSatisfaction'] == 'Slightly satisfied')]

plt.figure(figsize=(14, 8))
sns.countplot(data=sat, x='Country', hue='JobSatisfaction', palette='Paired', order=sat['Country'].value_counts()[:10].index)
sns.despine(left=True)
plt.xticks(rotation='vertical')

"""# **2. Various types types vs Job Satisfaction**"""

replace_dict = {
    'Extremely satisfied': 6,
    'Moderately satisfied': 5,
    'Slightly satisfied': 4,
    'Neither satisfied nor dissatisfied': 3,
    'Slightly dissatisfied':2,
    'Moderately dissatisfied': 1,
    'Extremely dissatisfied': 0
}
unique_dev_types = []
unique_devs = pd.unique(df['DevType'])
for dev_type in unique_devs.astype('str'):
    dev_types = dev_type.split(';')
    unique_dev_types.extend(dev_types)

unique_dev_types = list(set(unique_dev_types))
y_ticks = {i: val for val, i in replace_dict.items()}

for i, dev_type in enumerate(unique_dev_types):
    if i % 4 == 0:
        plt.figure(figsize=(15, 10))
    plt.subplot(2, 2, i % 4 + 1)
    plt.title('DevType: {} Job Satisfaction'.format(dev_type))
    tmp = df[df['DevType'].str.contains(dev_type)]['JobSatisfaction']
    tmp.hist(label=dev_type, orientation='horizontal')
    plt.yticks(np.arange(7), [y_ticks[i] for i in range(7)])
    if i % 4 == 3:
        plt.tight_layout()
        #plt.legend()
        plt.show()

"""---

# **Graph plotting the number of males and females in various age groups**
"""

male_female = df[df["Gender"].isin(['Male', 'Female'])]
plt.figure(figsize=(15,8))
g=sns.countplot(x=male_female['Age'],hue=male_female['Gender'], order=male_female['Age'].dropna().sort_values().unique())
g.set_xlabel("Age")
g.set_xticklabels(g.get_xticklabels(),rotation=90)
g.legend(bbox_to_anchor=(1.1, 1.05))
plt.title("Age Vs Gender")
plt.show()

"""# **A graph that depicts the number of males and females earning various amounts of salaries**"""

x1 = df.loc[df.Gender=='Male', 'ConvertedSalary']
x2 = df.loc[df.Gender=='Female', 'ConvertedSalary']

# Plot
kwargs = dict(hist_kws={'alpha':.6}, kde_kws={'linewidth':2})

plt.figure(figsize=(10,7))
sns.distplot(x1, color="dodgerblue", label="Male", **kwargs)
sns.distplot(x2, color="deeppink", label="Female", **kwargs)
plt.xlim(0,500000)
plt.legend();

"""# **Distibution based on Salary**"""

plt.figure(figsize=(16,5))
sns.distplot(df['ConvertedSalary'])

plt.show()

"""# **Salary v/s Coding Experience Plot**"""

df1 = df.copy()
df1['YearsCoding'].replace({'0-2 years':1,'3-5 years':2, '6-8 years':3, '9-11 years':4, '12-14 years':5, '15-17 years':6, '18-20 years':7,'21-23 years':8,'24-26 years':9,'27-29 years':10,'30 or more years':11},inplace=True)
df1 = df1.groupby('YearsCoding', as_index=False)['ConvertedSalary'].mean()
plt.plot(df1['YearsCoding'],df1['ConvertedSalary'])
plt.show()
df1['YearsCoding']. corr(df1['ConvertedSalary'])

"""# **Salary v/s Formal Education Plot**"""

df1 = df.copy()
df1['FormalEducation'].replace({'Some college/university study without earning a degree':2,'Bachelor’s degree (BA, BS, B.Eng., etc.)':4, 'Professional degree (JD, MD, etc.)':1, 'Associate degree':3, 'Master’s degree (MA, MS, M.Eng., MBA, etc.)':5, 'Other doctoral degree (Ph.D, Ed.D., etc.)':6},inplace=True)
df1 = df1.groupby('FormalEducation', as_index=False)['ConvertedSalary'].mean()
plt.plot(df1['FormalEducation'],df1['ConvertedSalary'])
plt.show()
df1['FormalEducation']. corr(df1['ConvertedSalary'])

df['FormalEducation'].unique()

"""# **Salary v/s Gender Plot**"""

x=[]
y=[]
for ind in df.index:
  if(df['Gender'][ind] == 'Male'):
    x.append(0)
    y.append(df['ConvertedSalary'][ind])
  elif(df['Gender'][ind] == 'Female'):
    x.append(1)
    y.append(df['ConvertedSalary'][ind])

import scipy.stats as stats
stats.pointbiserialr(x, y)

"""# **Countrywise Average Salary**"""

df1 = df.copy()
plt.figure(figsize=(16,5))
df1 = df1[df1["Country"].isin(['India', 'United States', 'Germany', 'United Kingdom','France','Canada','Spain','Australia','Israel'])]
df1 = df1.groupby('Country', as_index=False)['ConvertedSalary'].mean()
df1 = df1.sort_values('ConvertedSalary')
plt.bar(df1['Country'],df1['ConvertedSalary'],color="rgbkymc")
plt.xlabel("Countries")
plt.ylabel("Salary per annum (USD)")
plt.title("Country vs Average Salary",fontdict={'weight': 'bold', 'size': 24})
plt.show()
# df1['YearsCoding'].replace({'0-2 years':1,'3-5 years':2, '6-8 years':3, '9-11 years':4, '12-14 years':5, '15-17 years':6, '18-20 years':7,'21-23 years':8,'24-26 years':9,'27-29 years':10,'30 or more years':11},inplace=True)
# df1['YearsCoding']. corr(df1['ConvertedSalary'])

"""# **Commented Section**"""

# male_female = df[df["Gender"]=="Male" and df["Gender"]=="Female"]
# male_female.value_counts()
# sat = df[np.logical_or(np.logical_or(male_female['JobSatisfaction'] == 'Moderately satisfied', male_female['JobSatisfaction'] == 'Extremely satisfied'), male_female['JobSatisfaction'] == 'Slightly satisfied')]

# plt.figure(figsize=(14, 8))
# sns.countplot(data=sat, x='Country', hue='JobSatisfaction', palette='Paired', order=sat['Country'].value_counts()[:10].index)
# sns.despine(left=True)
# plt.xticks(rotation='vertical')

# my_df = df.copy()
# my_df['Age'].replace({'Under 18 years old':16.0,'18 - 24 years old':21.0, '25 - 34 years old':29.5, '35 - 44 years old':39.5, '45 - 54 years old':49.5, '55 - 64 years old':59.5, '65 years or older':70.0},inplace=True)
# corrMatrix = my_df['Age'].corr(my_df['ConvertedSalary'])
# print (corrMatrix)
# # x = my_df['Age']
# plt.plot(my_df['Age'],my_df['ConvertedSalary'])
# # my_df['Age'] = my_df['Age'] .astype(float)
# # my_df.dtypes

# male_female = df[df["Gender"].isin(['Male', 'Female'])]